// This version has a post-condition that is wrong.
// This is meant to check if your depth-parameter K
// is enough to catch the violation.

// Bubble sort.

// N is an experiment parameter; replace it with a concrete value.

bsort( a : []int | b : []int) {
  assume #a>=0 && #a>=N ;
  var k:int {
    k := 0 ;
    // inv of outer loop
    assert 0<=k && k<=#a
           && (forall i:: 0<=i && i<k ==> (forall j:: i<=j && j<#a ==> a[i]<=a[j])) ;
    while k<#a do {
      var m:int, tmp:int {
         m := #a-1 ;
         // inv of inner loop
         assert 0<=k && k<=#a
                && (forall i:: 0<=i && i<k ==> (forall j:: i<=j && j<#a ==> a[i]<=a[j]))
                && k<=m && m<#a
                && (forall j:: m<=j && j<#a ==> a[m]<=a[j]) ;
         while k<m do {
            if a[m]<a[m-1]
               then {
                  tmp := a[m] ;
                  a[m] := a[m-1] ;
                  a[m-1] := tmp
               }
               else { skip } ;
            m := m-1 }
      } ;
      k := k+1 }
  } ;
  b := a ;
  //assert (forall i:: 0<=i && i<#b ==> (forall j:: i<=j && j<#b ==> b[i]<=b[j]))
  // deliberate wrong post-cond:
  assert (forall i:: 0<=i && i<#b ==> (forall j:: i<=j && j<#b ==> b[i]<b[j]))
}
